
import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Monument } from "@/entities/Monument";
import { Guide } from "@/entities/Guide";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  ArrowLeft, 
  MapPin, 
  Star, 
  Users, 
  Clock,
  Award,
  Play,
  Globe
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function MonumentDetaljer() {
  const navigate = useNavigate();
  const [monument, setMonument] = useState(null);
  const [guides, setGuides] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  const urlParams = new URLSearchParams(window.location.search);
  const monumentId = urlParams.get('id');

  useEffect(() => {
    const loadData = async () => {
      try {
        const [monumentData, allGuides] = await Promise.all([
          Monument.list(),
          Guide.list()
        ]);
        
        const currentMonument = monumentData.find(m => m.id === monumentId);
        const monumentGuides = allGuides.filter(g => g.monument_id === monumentId);
        
        setMonument(currentMonument);
        setGuides(monumentGuides);
      } catch (error) {
        console.error("Error loading data:", error);
      } finally {
        setIsLoading(false);
      }
    };

    if (monumentId) {
      loadData();
    } else {
      navigate(createPageUrl("Monument"));
    }
  }, [monumentId, navigate]);

  const getPersonalityColor = (personality) => {
    const colors = {
      rolig: "bg-yellow-100 text-yellow-800 border-yellow-200",
      akademisk: "bg-blue-100 text-blue-800 border-blue-200",
      kortfattad: "bg-green-100 text-green-800 border-green-200",
      berättande: "bg-purple-100 text-purple-800 border-purple-200",
      inspirerande: "bg-pink-100 text-pink-800 border-pink-200",
      annan: "bg-gray-100 text-gray-800 border-gray-200"
    };
    return colors[personality] || colors.annan;
  };

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        delayChildren: 0.1,
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 100
      }
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen p-6 md:p-12">
        <div className="max-w-6xl mx-auto animate-pulse">
          <div className="h-64 md:h-96 bg-gray-200 rounded-2xl mb-8"></div>
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {Array(6).fill(0).map((_, i) => (
              <div key={i} className="h-80 bg-gray-200 rounded-xl"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (!monument) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Monument ej hittat</h2>
          <Link to={createPageUrl("Monument")}>
            <Button>Tillbaka till monument</Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="relative h-64 md:h-96 overflow-hidden"
      >
        <img 
          src={monument.image_url || `https://images.unsplash.com/1600x900/?${encodeURIComponent(monument.name + ' monument')}`}
          alt={monument.name}
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent"></div>
        
        <div className="absolute top-6 left-6">
          <Button 
            variant="secondary" 
            onClick={() => navigate(createPageUrl("Monument"))}
            className="bg-white/90 backdrop-blur-sm hover:bg-white"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Tillbaka
          </Button>
        </div>

        <div className="absolute bottom-6 left-6 right-6 text-white">
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.3 }}
          >
            <h1 className="text-3xl md:text-5xl font-bold mb-4">{monument.name}</h1>
            <div className="flex flex-wrap items-center gap-4 mb-4">
              {monument.location && (
                <div className="flex items-center gap-2">
                  <MapPin className="w-5 h-5" />
                  <span className="text-lg">{monument.location}</span>
                </div>
              )}
              <Badge className="bg-white/20 text-white border-white/30">
                {monument.category}
              </Badge>
              <div className="flex items-center gap-2">
                <Users className="w-5 h-5" />
                <span className="text-lg">{guides.length} guider tillgängliga</span>
              </div>
            </div>
            <p className="text-lg md:text-xl text-white/90 max-w-3xl">
              {monument.description}
            </p>
          </motion.div>
        </div>
      </motion.div>

      {/* Guides Section */}
      <div className="p-6 md:p-12">
        <div className="max-w-6xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-8"
          >
            <h2 className="text-2xl md:text-3xl font-bold text-gray-900 mb-4">
              Välj din guide
            </h2>
            <p className="text-lg text-gray-600">
              Upptäck {monument.name} genom olika perspektiv och expertområden
            </p>
          </motion.div>

          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate="visible"
          >
            {guides.length > 0 ? (
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                <AnimatePresence>
                  {guides.map((guide) => (
                    <motion.div key={guide.id} variants={itemVariants}>
                      <Card className="group hover:shadow-2xl transition-all duration-500 border-0 bg-white/80 backdrop-blur-sm hover:bg-white overflow-hidden h-full">
                        <CardContent className="p-6 h-full flex flex-col">
                          <div className="flex items-start gap-4 mb-4">
                            <div className="relative">
                              <img 
                                src={guide.profile_picture_url || `https://images.unsplash.com/150x150/?face&${encodeURIComponent(guide.name)}`}
                                alt={guide.name}
                                className="w-16 h-16 rounded-full object-cover"
                              />
                              {guide.verified && (
                                <div className="absolute -top-1 -right-1 w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center">
                                  <Award className="w-3 h-3 text-white" />
                                </div>
                              )}
                            </div>
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <h3 className="font-bold text-lg text-gray-900">{guide.name}</h3>
                                {guide.verified && (
                                  <Badge variant="secondary" className="text-xs bg-blue-100 text-blue-800">
                                    Verifierad
                                  </Badge>
                                )}
                              </div>
                              <p className="text-sm text-gray-600">{guide.expertise}</p>
                            </div>
                          </div>

                          <div className="flex flex-wrap gap-2 mb-4">
                            <Badge className={`border ${getPersonalityColor(guide.personality)}`}>
                              {guide.personality}
                            </Badge>
                            {guide.languages && guide.languages.map((lang, index) => (
                              <Badge key={index} variant="outline" className="text-xs">
                                <Globe className="w-3 h-3 mr-1" />
                                {lang}
                              </Badge>
                            ))}
                          </div>

                          {guide.bio && (
                            <p className="text-gray-600 text-sm mb-4 line-clamp-3 flex-1">
                              {guide.bio}
                            </p>
                          )}

                          <div className="space-y-3">
                            {guide.duration_minutes && (
                              <div className="flex items-center gap-2 text-sm text-gray-600">
                                <Clock className="w-4 h-4" />
                                <span>{guide.duration_minutes} minuter</span>
                              </div>
                            )}

                            {guide.average_rating && (
                              <div className="flex items-center gap-2">
                                <div className="flex items-center gap-1">
                                  <Star className="w-4 h-4 text-yellow-400 fill-current" />
                                  <span className="font-medium">{guide.average_rating.toFixed(1)}</span>
                                </div>
                                <span className="text-sm text-gray-600">
                                  ({guide.total_reviews || 0} recensioner)
                                </span>
                              </div>
                            )}

                            <Link to={createPageUrl(`GuideProfil?id=${guide.id}`)}>
                              <Button className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-xl group-hover:shadow-lg transition-all duration-300">
                                <Play className="w-4 h-4 mr-2" />
                                Lyssna på guide
                              </Button>
                            </Link>
                          </div>
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            ) : (
              <motion.div 
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-center py-12"
              >
                <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Users className="w-12 h-12 text-gray-400" />
                </div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                  Inga guider tillgängliga än
                </h3>
                <p className="text-gray-600 mb-6">
                  Detta monument väntar på sina första guider. 
                </p>
                <Link to={createPageUrl("LaddaUppGuide")}>
                  <Button className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800">
                    Bli den första guiden
                  </Button>
                </Link>
              </motion.div>
            )}
          </motion.div>
        </div>
      </div>
    </div>
  );
}
